/*
* Filename 	 CallPIATService.esql
* Modulename ComposeServiceCall
* Date	      LibraryName      			 Name		    		 Version		    Description
* 01/02/2017  CallPiatService  G Sugumar Raja & ShahulHameed SS   0.1 	 	Initial Version - Retrieving Session Id and 
																			Sending Payload Data to PIAT Server.
*/ 

BROKER SCHEMA esb.primark.piat


DECLARE CACHE SHARED ROW ;
DECLARE UserName EXTERNAL CHARACTER '';
DECLARE Password EXTERNAL CHARACTER '';
DECLARE LoginURL EXTERNAL CHARACTER '';
DECLARE RequestURL EXTERNAL CHARACTER '';


CREATE COMPUTE MODULE ComposeServiceCall
	
		CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE FIELD OutputLocalEnvironment.Destination.HTTP;
		DECLARE refURL REFERENCE TO OutputLocalEnvironment.Destination.HTTP;
		
		CREATE FIRSTCHILD OF Environment.Variables.Payload DOMAIN 'JSON'  NAME 'JSON'; 
		SET Environment.Variables.Payload.JSON = InputRoot.JSON;

		-- If Session_Id exists then Sending Payload Data with existing Session Id. 
		IF EXISTS(CACHE.Session_Id[]) THEN 
			SET OutputRoot.HTTPInputHeader.Authorization = 'Basic sessionId=' ||CACHE.Session_Id ;
			SET Environment.Variables.SessionId = CACHE.Session_Id ; -- For Audit Purpose
			SET OutputRoot.JSON = Environment.Variables.Payload.JSON;
			set refURL.RequestURL= RequestURL;
		 	PROPAGATE to TERMINAL 'out' DELETE NONE ;
		ELSE
		-- Authenticating and Retrieving the Session ID.
		 	SET OutputRoot.JSON.Data.username = UserName;
		 	SET OutputRoot.JSON.Data.password = Password;
		 	SET refURL.RequestURL = LoginURL;
		 	PROPAGATE to TERMINAL 'out' DELETE NONE;
		 -- Sending Payload Data with the Retrieved Session Id.	
			SET OutputRoot.HTTPInputHeader.Authorization = 'Basic sessionId=' ||CACHE.Session_Id ;
			DELETE FIELD OutputRoot.JSON;
			CREATE FIELD OutputRoot.JSON;
			SET OutputRoot.JSON = Environment.Variables.Payload.JSON;
			set refURL.RequestURL= RequestURL;
			PROPAGATE to TERMINAL 'out' DELETE NONE;
		END IF;
		
		-- If the Session ID expired then Authenticating again to Retrieve new Session ID.
		IF (Environment.Variables.responsecode = '401' )THEN
	 		DELETE FIELD CACHE.Session_Id;
	 		DELETE FIELD OutputRoot.JSON.Data.changes;
	 		SET OutputRoot.JSON.Data.username =  UserName;
 			SET OutputRoot.JSON.Data.password = Password;
 			SET refURL.RequestURL = LoginURL;
 			PROPAGATE to TERMINAL 'out' DELETE NONE;
 		-- Sending Payload Data with the Retrieved Session Id.
			DELETE FIELD OutputRoot.JSON;	
			SET OutputRoot.HTTPInputHeader.Authorization = 'Basic sessionId=' ||CACHE.Session_Id ;
			CREATE FIELD OutputRoot.JSON;
			SET OutputRoot.JSON = Environment.Variables.Payload.JSON;
			set refURL.RequestURL= RequestURL;
			PROPAGATE to TERMINAL 'out' DELETE NONE;	 	
		END IF;	
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/*
* Filename 	 CallPIATService.esql
* Modulename ValidatePIATResponse
* Date	      LibraryName      			 Name		    		 Version		    Description
* 01/02/2017  CallPiatService  G Sugumar Raja & ShahulHameed SS	  0.1 	 Initial Version - Checking the Response Code  
																		 and throwing User Exception based on Response
																		 Code Values.
*/ 

CREATE COMPUTE MODULE ValidatePIATResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		SET Environment.Variables.responsecode = InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code"; -- For Audit Purpose
		DECLARE CcsidValue INTEGER COALESCE(InputRoot.MQMD.CodedCharSetId,1208);
		DECLARE ERROR CHAR CAST(CAST(InputRoot.BLOB.BLOB AS BLOB) AS CHAR CCSID CcsidValue); 

		SET Environment.Variables.ErrorResponse = ERROR ; -- For Audit Purpose
		
		-- Throwing User Exception for Response Code Values other than 200 and 401.
		IF (Environment.Variables.responsecode NOT IN (200,401) )THEN 
			THROW USER EXCEPTION VALUES ( 'Error Response Code ',Environment.Variables.responsecode,'Reason ',ERROR);
		END IF;
		
		
		IF NOT EXISTS(CACHE.Session_Id[]) THEN 
		-- Throwing User Exception incase of Invalid Credentials.
			IF NOT EXISTS (InputRoot.JSON.Data.sessionId[]) THEN
		 		THROW USER EXCEPTION VALUES('Invalid Username or Password');
			END IF;
		-- Setting the Session Id to CACHE variable.
			SET CACHE.Session_Id = InputRoot.JSON.Data.sessionId;
			SET Environment.Variables.SessionId = InputRoot.JSON.Data.sessionId ; -- For Audit Purpose
			END IF;
		 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
