/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		 CALL CopyMessageHeaders();
--		 CALL CopyEntireMessage();
		 	-- Variables Declaration 
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC ;
		SET Environment.Variables.UUID = InputRoot.MQRFH2.usr.UUID ; -- For Audit Purpose.
		 	
		-- Transforming Projects data from XML Format to JSON Format as per the DOMD.
		IF EXISTS(inRef.PROJECT[]) THEN	
		    DECLARE projectRef REFERENCE TO inRef.PROJECT;
	  		CREATE FIELD OutputRoot.JSON.Data.changes IDENTITY(JSON.Array) changes; 
		 	DECLARE projectdataRef REFERENCE TO OutputRoot.JSON.Data.changes;
		 	CREATE FIRSTCHILD OF projectdataRef AS projectdataRef NAME 'Item' ;
		 	SET projectdataRef.operation = 1;
			SET projectdataRef.keyFields VALUE = null;
			SET projectdataRef.ID VALUE = null;
			CREATE FIELD projectdataRef.dataFields ;
			DECLARE projRef REFERENCE TO projectdataRef.dataFields ;
		
		 	SET projRef.docid = '0';
		 	SET projRef.oracle_project_code = projectRef.ORACLE_PROJECT_CODE;
		 	SET projRef.oracle_project_description = projectRef.DESCRIPTION;
		 	SET projRef.start_date_active = CAST (NULLIF(projectRef.START_DATE_ACTIVE,'') AS DATE FORMAT 'yyyy-MM-dd');
		 	SET projRef.end_date_active = CAST (NULLIF(projectRef.END_DATE_ACTIVE,'') AS DATE FORMAT 'yyyy-MM-dd');
		 	SET projRef.sun_project_code = NULLIF(projectRef.SUN_PROJECT,'');
		 	SET projRef.cip_flag = NULLIF(projectRef.CIP_FLAG,'');
		 	SET projRef.operating_unit = projectRef.BUSINESS_UNIT.ENTITY;
		 	IF projectRef.BUSINESS_UNIT.ENABLED = 'N' THEN
		 		SET projRef.enabled_flag = 'N';
		 	ELSE
		 		SET projRef.enabled_flag = projectRef.ENABLED_FLAG;
		 	END IF;	
		 	SET projRef.extraction_date = projectRef.EXTRACTION_DATE;
		 	SET projRef.esb_insert_date_time = REPLACE(CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'yyyy-MM-dd HH:mm:ss') , ' ' , 'T');
		 END IF;
	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
