/*
* Filename 	 ESB_PIAT_CoA_COSTCENTRES_CMF.esql
* Modulename TransformCostcentresXMLToJSONFile
* Interfacename PI179 ORACLE_CoA
* Date	      ProjectName       Name		    Version		    Description
* 26/01/2017  ORACLE_CoA	 G Sugumar Raja		  0.1 	 Initial Version - Transforming CostCentres XML data to   
														 JSON data with Direct Mapping and Sending it to PIAT Server.
* 04/07/2017  ORACLE_CoA	 G Sugumar Raja		  0.2 	 Transforming CostCentres XML data to JSON  
														 data with Business_Units as per the DOMD (v0.11)															 
*/ 

BROKER SCHEMA esb.primark.oracle

--DECLARE InterfaceId EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE ESB_PIAT_CoA_COSTCENTRES_CMF_CaptureBusinessData
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		 SET Environment.Variables.BussinessInfo.MessageId = OutputRoot.MQRFH2.usr.UUID;
		 PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		 SET Environment.Variables.InterfaceId = InterfaceId;
		 PROPAGATE TO TERMINAL 'out' DELETE NONE;
		 RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;



CREATE COMPUTE MODULE ESB_PIAT_CoA_COSTCENTRES_CMF_TransformCostcentresXMLToJSONFile
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
--		 CALL CopyEntireMessage();
		 	-- Variables Declaration 
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC ;
		SET Environment.Variables.UUID = InputRoot.MQRFH2.usr.UUID ; -- For Audit Purpose.
		 	
		-- Transforming CostCentres data from XML Format to JSON Format as per the DOMD.
		IF EXISTS(inRef.COST_CENTRE[] ) THEN
	  		DECLARE costcentreRef REFERENCE TO inRef.COST_CENTRE;
	  		CREATE FIELD OutputRoot.JSON.Data.changes IDENTITY(JSON.Array) changes; 
	 		DECLARE costcentredataRef REFERENCE TO OutputRoot.JSON.Data.changes ;
	 		CREATE FIRSTCHILD OF costcentredataRef AS costcentredataRef NAME 'Item' ;
		 	SET costcentredataRef.operation = 1;
			SET costcentredataRef.keyFields VALUE = null;
			SET costcentredataRef.ID VALUE = null;
			CREATE FIELD costcentredataRef.dataFields ;
			DECLARE costRef REFERENCE TO costcentredataRef.dataFields ;
		
		 	SET costRef.docid = '0';
		 	SET costRef.oracle_cost_centre_code = costcentreRef.ORACLE_COST_CENTRE_CODE;
		 	SET costRef.oracle_cost_description = costcentreRef.DESCRIPTION;
		 	SET costRef.start_date_active = CAST (NULLIF(costcentreRef.START_DATE_ACTIVE,'') AS DATE FORMAT 'yyyy-MM-dd');
		 	SET costRef.end_date_active = CAST (NULLIF(costcentreRef.END_DATE_ACTIVE,'') AS DATE FORMAT 'yyyy-MM-dd');
		 	SET costRef.sun_cost_centre_code = NULLIF(costcentreRef.SUN_COST_CENTRE,'');
		 	SET costRef.operating_unit = costcentreRef.BUSINESS_UNIT.ENTITY;
		 	IF costcentreRef.BUSINESS_UNIT.ENABLED = 'N' THEN
		 		SET costRef.enabled_flag = 'N';
		 	ELSE
		 		SET costRef.enabled_flag = costcentreRef.ENABLED_FLAG;
		 	END IF;	
		 	SET costRef.extraction_date = costcentreRef.EXTRACTION_DATE;
		 	SET costRef.esb_insert_date_time = REPLACE(CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'yyyy-MM-dd HH:mm:ss') , ' ' , 'T');
		 END IF;
	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;