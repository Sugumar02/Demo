BROKER SCHEMA pib.esb.common.audit
PATH pib.esb.common;

CREATE COMPUTE MODULE AUDITLOGGER_SF_InitialiseData
	DECLARE UDP_InterfaceId EXTERNAL CHARACTER '';

	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN
		DECLARE envRef	REFERENCE TO Environment.Variables;
		DECLARE rootRef	REFERENCE TO InputRoot;

		IF Environment.Variables.LoggingInitialised IS NULL THEN

			IF NOT EXISTS(Environment.Variables[]) THEN
				CREATE FIELD Environment.Variables AS envRef;
			END IF;

			-- Store the InterfaceId in Environment tree, can be used later in service.
			SET envRef.InterfaceId = UDP_InterfaceId;

			IF CARDINALITY(rootRef.MQMD[]) > 0 THEN

				CALL ESB_MQFlowInit(envRef, rootRef);

			ELSEIF rootRef.Properties.ReplyProtocol = 'FILE' THEN

				CALL ESB_FileFlowInit(envRef, InputLocalEnvironment);

			ELSEIF CARDINALITY(rootRef.HTTPInputHeader[]) > 0 THEN

				CALL ESB_HTTPFlowInit(envRef, rootRef);

			ELSE

				-- Must be a Timer node or something other.
				CALL ESB_OtherFlowInit(envRef);

			END IF;		

			SET envRef.LoggingInitialised = TRUE;
		END IF;		
			
		RETURN TRUE;
	END;	
END MODULE;


CREATE COMPUTE MODULE AUDITLOGGER_SF_CheckLogLevel
	DECLARE LogLevelSet		SHARED BOOLEAN FALSE;
	DECLARE LogLevel 		SHARED CHARACTER '';

	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN
		DECLARE envRef REFERENCE TO Environment.Variables;

		IF LogLevelSet = FALSE THEN
			SET LogLevel = TRIM(THE(SELECT ITEM T.LOGLEVEL
											FROM Database.dbo.ESB_AUDIT_CONFIG AS T
					 						WHERE T.PROJECTNAME = 'Oracle Retail' AND
					 	  	  			  		  T.INTERFACE_ID = envRef.InterfaceId));
			SET LogLevelSet = TRUE;
		END IF;

		-- If LogLevel is 0, or if no Log Level value in DB, then no logging, so end processing here.
		IF LogLevel = PCC_GetLogLevelNone() OR COALESCE(LogLevel, '') = '' THEN

			RETURN FALSE;

		ELSE

			SET envRef.LogLevel = LogLevel;

			RETURN TRUE;
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE AUDITLOGGER_SF_GenerateAuditMessage
	DECLARE UDP_ProjectName		EXTERNAL CHARACTER '';
	DECLARE UDP_InterfaceName	EXTERNAL CHARACTER '';
	DECLARE UDP_InterfaceId 	EXTERNAL CHARACTER '';
	DECLARE UDP_SourceAppln 	EXTERNAL CHARACTER '';
	DECLARE UDP_TargetAppln 	EXTERNAL CHARACTER '';
	DECLARE UDP_LoggingType 	EXTERNAL CHARACTER ''; 

	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN
		CALL CopyMessageHeaders();

		DECLARE nsCOE 				NAMESPACE 'http://w3c.com/schema/LogMessageV1';

		DECLARE envRef				REFERENCE TO Environment.Variables;
		DECLARE envCtxtInfoRef		REFERENCE TO envRef;
		DECLARE localEnvRef			REFERENCE TO OutputLocalEnvironment;
		DECLARE rootRef				REFERENCE TO InputRoot;
		DECLARE outRef				REFERENCE TO OutputRoot;
		DECLARE ccsidValue		 	INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodingValue 		INTEGER InputRoot.Properties.Encoding;
		DECLARE putDateTime	 		CHARACTER;
		DECLARE	messageRelatedInfo	CHARACTER;
		DECLARE msgBlob				BLOB;

		-- Timer Node does not set the CodedCharSetId value, so use default.
		IF ccsidValue = 0 THEN
			SET ccsidValue = PCC_GetUTF8CCSID();
		END IF;
		
		-- Remove any HTTP Headers.
		SET OutputRoot.HTTPInputHeader 		= NULL;
		SET OutputRoot.HTTPRequestHeader 	= NULL;
		SET OutputRoot.HTTPResponseHeader 	= NULL;

		-- use current timestamp now for the put date/time so we have valid metrics for processing time of message.		
		SET putDateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss.SSSSSS');

		IF envRef.LogLevel = PCC_GetLogLevelAll() THEN
			SET msgBlob = rootRef.BLOB.BLOB;
			CALL ConvertDataToUTF8(msgBlob, localEnvRef, encodingValue);
		END IF;

		--  Create output message headers BLOB AND Message related information (Metadata of message)
		SET messageRelatedInfo = CAST(ccsidValue AS CHAR) || ',' || CAST(encodingValue AS CHAR) || ',' || ':';
	
		-- Create the output LogMessage message. These details will be sent to 'MW_ERROR_LOG' table 
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIELD OutputRoot.XMLNSC.LogMessage AS outRef;

		SET outRef.(XMLNSC.NamespaceDecl)xmlns:COE = nsCOE;
	
		-- Generic Metadata Specific Details
		SET outRef.nsCOE:GenericMetadata.nsCOE:MessageType 			= 'AuditMessage';
		SET outRef.nsCOE:GenericMetadata.nsCOE:TimeStamp 			= putDateTime;
		SET outRef.nsCOE:GenericMetadata.nsCOE:GlobalTransactionId 	= envRef.GlobalTransactionId;
		SET outRef.nsCOE:GenericMetadata.nsCOE:LocalTransactionId 	= envRef.LocalTransactionId;
		SET outRef.nsCOE:GenericMetadata.nsCOE:ParentTransactionId 	= envRef.ParentTransactionId;
		SET outRef.nsCOE:GenericMetadata.nsCOE:ProjectName 			= UDP_ProjectName;
		SET outRef.nsCOE:GenericMetadata.nsCOE:InterfaceName 		= UDP_InterfaceName;
		SET outRef.nsCOE:GenericMetadata.nsCOE:InterfaceId	 		= UDP_InterfaceId;
		SET outRef.nsCOE:GenericMetadata.nsCOE:SourceApp 			= UDP_SourceAppln;
		SET outRef.nsCOE:GenericMetadata.nsCOE:DestinationApp 		= UDP_TargetAppln;
		
		-- Technology Specific Details	
		MOVE envCtxtInfoRef TO envRef.ContextInfo;
		SET outRef.nsCOE:TechnologySpecific.nsCOE:ToolName 			= 'IIB';
		SET outRef.nsCOE:TechnologySpecific.nsCOE:BrokerName 		= envCtxtInfoRef.Broker.BrokerName;
		SET outRef.nsCOE:TechnologySpecific.nsCOE:BrokerFamily 		= envCtxtInfoRef.Broker.BrokerFamily;
		SET outRef.nsCOE:TechnologySpecific.nsCOE:ExecutionGroup 	= envCtxtInfoRef.Flow.ExecutionGroupLabel;
		SET outRef.nsCOE:TechnologySpecific.nsCOE:QueueManager 		= envCtxtInfoRef.Broker.QueueManagerName;
		SET outRef.nsCOE:TechnologySpecific.nsCOE:InputQueue 		= envRef.SourceQueue;
		SET outRef.nsCOE:TechnologySpecific.nsCOE:MsgFlow 			= envCtxtInfoRef.Flow.MessageFlowName;
		
		-- Implementation Specific Details
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:LoggingPatternInfo[1].(XMLNSC.Attribute) name = 'IsPersisitant';
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:LoggingPatternInfo[1] = 'TRUE';
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:LoggingPatternInfo[2].(XMLNSC.Attribute) name = 'LoggingType';
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:LoggingPatternInfo[2] = UDP_LoggingType;
	
		-- Audit Information
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:AuditInformation.nsCOE:AuditType 			= envRef.AuditName;
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:AuditInformation.nsCOE:KeyIdentifier 		= envRef.KeyIdentifier;
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:AuditInformation.nsCOE:OriginalMessage	= CAST(msgBlob AS CHARACTER CCSID ccsidValue ENCODING encodingValue);
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:AuditInformation.nsCOE:MessageDetails 	= messageRelatedInfo;
		SET outRef.nsCOE:ImplementationSpecific.nsCOE:AuditInformation.nsCOE:MessageId 			= envRef.MessageId;
			
		RETURN TRUE;
	END;	

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
	
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
