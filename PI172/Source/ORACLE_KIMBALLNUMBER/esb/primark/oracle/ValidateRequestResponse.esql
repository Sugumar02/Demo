/*
* Filename 	 ValidateRequestResponse.esql
* Modulename ValidateRequest
* Interfacename PI172 Kimball Number
* Date	      ProjectName       				Name		            Version			 Description
* 26/10/2016  Kimball Number ESB Pilot 1	  G Sugumar Raja			 0.1 			Initial Version - Validating Request ID and Quantity
* 15/11/2016  Kimball Number ESB Pilot 1	  G Sugumar Raja			 0.2 			Updated Version - IQA Comments are incorporated.
*/ 

BROKER SCHEMA esb.primark.oracle

DECLARE ns NAMESPACE 'http://www.primark.co.uk/GetKimballNumber/' ;
DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/' ;

CREATE COMPUTE MODULE ValidateRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		-- Variables Declaration 
		DECLARE reqQCheck INTEGER 0;
		DECLARE requestRef REFERENCE TO OutputRoot.SOAP.Body.ns:getKimballNumbers;
		
		-- To check whether the incoming message is valid or not
		
		IF EXISTS(requestRef.RequestID[]) AND requestRef.RequestID <> '' AND EXISTS(requestRef.Quantity[]) AND CAST (requestRef.Quantity AS INTEGER DEFAULT -1) <> -1 AND LENGTH(requestRef.Quantity) > 0  THEN
				
				SET OutputLocalEnvironment = InputLocalEnvironment ;
				PROPAGATE TO terminal 'out' ;
			
		ELSE
		
		-- Setting ReplystatusCode to 400 for invalid incoming message.
		
				SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 400;
				DELETE FIELD OutputRoot.SOAP;
				DELETE FIELD OutputRoot.HTTPInputHeader;
				SET OutputRoot.SOAP.Body.soapenv:Fault.faultcode = 'SOAP-ENV:Client' ;
				SET OutputRoot.SOAP.Body.soapenv:Fault.faultstring= 'The request could not be understood by the server due to malformed syntax(Request ID or Quantity is Missing or Invalid)';
				PROPAGATE TO terminal 'out1' ;
		END IF;

			
			RETURN FALSE;
		END;

		CREATE PROCEDURE CopyMessageHeaders() BEGIN
			DECLARE I INTEGER 1;
			DECLARE J INTEGER;
			SET J = CARDINALITY(InputRoot.*[]);
			WHILE I < J DO
				SET OutputRoot.*[I] = InputRoot.*[I];
				SET I = I + 1;
			END WHILE;
		END;

		CREATE PROCEDURE CopyEntireMessage() BEGIN
			SET OutputRoot = InputRoot;
		END;
	END MODULE;
	
	/*
* Filename 	 ValidateRequestResponse.esql
* Modulename ValidateIPMSResponse
* Interfacename PI172 Kimball Number
* Date	      ProjectName       				Name		            Version			 Description
* 26/10/2016  Kimball Number ESB Pilot 1	  G Sugumar Raja			 0.1 			Initial Version - Validating Request ID and Quantity
* 15/11/2016  Kimball Number ESB Pilot 1	  G Sugumar Raja			 0.2 			Updated Version - IQA Comments are incorporated.
*/ 
	
	CREATE COMPUTE MODULE ValidateIPMSResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
	
	